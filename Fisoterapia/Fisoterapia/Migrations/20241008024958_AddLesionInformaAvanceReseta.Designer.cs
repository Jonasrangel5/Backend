// <auto-generated />
using System;
using Fisoterapia.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fisoterapia.Migrations
{
    [DbContext(typeof(FisoterapiaDbContext))]
    [Migration("20241008024958_AddLesionInformaAvanceReseta")]
    partial class AddLesionInformaAvanceReseta
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fisoterapia.Entities.Auth.InformaAvance", b =>
                {
                    b.Property<int>("IdInforma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInforma"));

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EjerciciosRealizados")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvolucionLesion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLesion")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdInforma");

                    b.HasIndex("IdLesion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("InformasAvance");
                });

            modelBuilder.Entity("Fisoterapia.Entities.Auth.Lesion", b =>
                {
                    b.Property<int>("IdLesion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLesion"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLesion");

                    b.ToTable("Lesiones");
                });

            modelBuilder.Entity("Fisoterapia.Entities.Auth.Reseta", b =>
                {
                    b.Property<int>("IdReseta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReseta"));

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Evolucion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdLesion")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdReseta");

                    b.HasIndex("IdLesion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Resetas");
                });

            modelBuilder.Entity("Fisoterapia.Entities.Auth.TipoUsuario", b =>
                {
                    b.Property<int>("IdTipoUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoUsuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoUsuario"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fechaCreacion");

                    b.HasKey("IdTipoUsuario");

                    b.ToTable("TipoUsuario", "usu");
                });

            modelBuilder.Entity("Fisoterapia.Entities.Auth.Usuario", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("idUsuario");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contraena");

                    b.Property<DateTime?>("FechaActilizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fechaActualizacion");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2")
                        .HasColumnName("fechaRegistro");

                    b.Property<int?>("IdTipoUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idTipoUsuario");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombreCompleto");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("usuario");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primerApellido");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primerNombre");

                    b.Property<string>("SegundoApellido")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("segundoApellido");

                    b.Property<string>("SegundoNombre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("segundoNombre");

                    b.HasKey("IdUsuario");

                    b.HasIndex("IdTipoUsuario");

                    b.ToTable("Usuario", "usu");
                });

            modelBuilder.Entity("Fisoterapia.Entities.Auth.InformaAvance", b =>
                {
                    b.HasOne("Fisoterapia.Entities.Auth.Lesion", "Lesion")
                        .WithMany()
                        .HasForeignKey("IdLesion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fisoterapia.Entities.Auth.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Fisoterapia.Entities.Auth.Reseta", b =>
                {
                    b.HasOne("Fisoterapia.Entities.Auth.Lesion", "Lesion")
                        .WithMany()
                        .HasForeignKey("IdLesion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fisoterapia.Entities.Auth.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Fisoterapia.Entities.Auth.Usuario", b =>
                {
                    b.HasOne("Fisoterapia.Entities.Auth.TipoUsuario", "TipoUsuario")
                        .WithMany()
                        .HasForeignKey("IdTipoUsuario");

                    b.Navigation("TipoUsuario");
                });
#pragma warning restore 612, 618
        }
    }
}
